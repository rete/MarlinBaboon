  /// \file TrackFinderProcessor.hh
/*
 *
 * TrackFinderProcessor.hh header template generated by fclass
 * Creation date : jeu. mai 9 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef TRACKFINDERPROCESSOR_HH
#define TRACKFINDERPROCESSOR_HH

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector> 

#include "marlin/Processor.h"
#include "marlin/Exceptions.h"

#include "Monitoring/BaboonMonitoring.hh"

#include "Managers/DetectorManager.hh"
#include "Managers/AlgorithmManager.hh"
#include "Managers/AnalysisManager.hh"
#include "Managers/ClusteringManager.hh"
#include "Managers/CoreManager.hh"
#include "Managers/ShowerManager.hh"
#include "Managers/TrackManager.hh"

#include "Detector/SDHCAL.hh"

#include "Utilities/Globals.hh"
#include "Utilities/Internal.hh"
#include "Objects/ObjectConnector.hh"



struct ClusterAgglomerat {

	baboon::Cluster *cluster;
	baboon::Cluster *forwardCluster;
	bool isFirstCluster;
	baboon::ClusterCollection *clusterCollection;
	baboon::ObjectConnector *forwardConnector;
	bool shouldFollowNextConnector;
};


typedef std::vector<ClusterAgglomerat *> ClusterAgglomeratVec;

/* 
 * Class ShowerSplitterProcessor
 * Inherits from base class marlin::Processor
 */ 
class TrackFinderProcessor : public marlin::Processor {

	public:

		/*!
		 *
		 * Default Constructor
		 *
		 */
		TrackFinderProcessor();

		/*!
		 *
		 * Default Destructor
		 *
		 */
		virtual ~TrackFinderProcessor();

		/*!
		 *
		 * @brief Return a new processor
		 *
		 */
		virtual Processor *newProcessor()
			{ return new TrackFinderProcessor(); }

		/*!
		 *
		 * @brief Must be defined by the user. Init the processor
		 *
		 */
		virtual void init();

		/*!
		 *
		 * @brief Must be defined by the user. Process the run header.
		 *
		 */
		virtual void processRunHeader( EVENT::LCRunHeader* run  );

		/*!
		 *
		 * @brief Must be defined by the user. Process an event
		 *
		 */
		virtual void processEvent( EVENT::LCEvent * );

		/*!
		 *
		 * @brief Must be defined by the user. Check the event.
		 *
		 */
		virtual void check( EVENT::LCEvent * evt );

		/*!
		 *
		 * @brief Must be defined by the user. Called after processing all the events.
		 *
		 */
		virtual void end();

		/*!
		 *
		 * @brief  Load the sdhcal hits in the calorimeter from the LCEvent object
		 *
		 */
		baboon::Return LoadSDHCALHits( baboon::SDHCAL *sdhcal , EVENT::LCEvent * );

		/*!
		 *
		 * @brief  Clear the content for managers and detectors
		 *
		 */
		baboon::Return ClearContent();

		/*!
		 *
		 * @brief Draw an arrow in a calorimeter. In IJK coordinates
		 *
		 */
		void DrawEveArrow( baboon::Calorimeter *calorimeter ,
												  double I1 , double J1 , double K1 ,
												  double I2 , double J2 , double K2 ,
												  int color );

		/*!
		 *
		 * @brief Count the number of backward connection for a given cluster
		 *
		 */
		unsigned int HowManyBackwardConnections( baboon::Cluster *cluster );

		/*!
		 *
		 * @brief Count the number of forward connection for a given cluster
		 *
		 */
		unsigned int HowManyForwardConnections( baboon::Cluster *cluster );

		/*!
		 *
		 * @brief Recursive function which start from a cluster and
		 * look for a potential track in the next layers
		 * If a cluster if found and satisfy some conditions ( see the function itself ),
		 * run it again on this cluster
		 *
		 */
		void FindPotentialTrack( ClusterAgglomerat * );

		/*!
		 *
		 * @brief Sort the cluster collection by size. Useful for track redundancy .
		 *
		 */
		void SortClusterCollectionsBySize( std::vector<baboon::ClusterCollection *> &vec );

		/*!
		 *
		 * @brief Draw a set of connection linking the given cluster.
		 * Useful for track links in monitoring
		 *
		 */
		void DrawTrackConnectors( baboon::ClusterCollection *trackClusters , int color );

		/*!
		 *
		 * @brief Sort the cluster collection by layer
		 *
		 */
		void SortClustersByLayer( baboon::ClusterCollection *clusterCol );

		/*!
		 *
		 * @brief First cut applied on a 2D cluster
		 * to decide whether or not it can belongs to a track
		 *
		 */
		bool KeepCluster( baboon::Cluster *cluster , baboon::ClusterCollection *clusterCollection );



	protected:

		// The sdhcal calorimeter instance
		baboon::SDHCAL *sdhcal;

		// monitoring
		baboon::BaboonMonitoring *monitoring;

		// managers
		baboon::DetectorManager *detectorManager;
		baboon::AlgorithmManager *algorithmManager;
		baboon::AnalysisManager *analysisManager;
		baboon::ClusteringManager *clusteringManager;
		baboon::CoreManager *coreManager;
		baboon::ShowerManager *showerManager;
		baboon::TrackManager *trackManager;

		// processor parameters
		bool enableMonitoring;
		std::string algorithmConfigFileName;
		std::string rootOutputFile;
		std::string displayMode; // for monitoring
		std::string decoderString; // for EVENT::CalorimeterHit
		std::string SDHCALCollectionName; // collection in the slcio file
		baboon::StringVector IJKEncoding; // the ijk encoding. default is ( I , J , K-1 )
		std::string gearFile; // for sdhcal geometry

		ClusterAgglomeratVec *clusterAgglomerats; // for memory management
		std::vector<baboon::ClusterCollection *> potentialTracks;

		// processor parameters
		int clusterSizeLimit;
		int minimumTrackSize;
		int lookupDistanceX;
		int lookupDistanceY;
		int lookupDistanceZ;
		double maximumConnectorsAngle;

};  // class 


#endif  //  TRACKFINDERPROCESSOR_HH
