  /// \file ShowerSplitterProcessor.hh
/*
 *
 * ShowerSplitterProcessor.hh header template generated by fclass
 * Creation date : jeu. mai 9 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef MONITORING_TEST_PROCESSOR_HH
#define MONITORING_TEST_PROCESSOR_HH 1

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector> 


#include "marlin/Processor.h"
#include "marlin/Exceptions.h"

#include "Monitoring/BaboonMonitoring.hh"
#include "Managers/DetectorManager.hh"
#include "Managers/AlgorithmManager.hh"
#include "Detector/SDHCAL.hh"
#include "Utilities/Globals.hh"
#include "Utilities/Internal.hh"

/* 
 * Class MonitoringTestProcessor
 * Inherits from base class BaboonProcessor
 */ 

class MonitoringTestProcessor : public marlin::Processor {

	public:

		/*!
		 *
		 * Default Constructor
		 *
		 */
		MonitoringTestProcessor();

		/*!
		 *
		 * Default Destructor
		 *
		 */
		virtual ~MonitoringTestProcessor();


		virtual Processor *newProcessor()
			{ return new MonitoringTestProcessor(); }

		/*!
		 *
		 * @brief Must be defined by the user. Init the processor
		 *
		 */
		virtual void init();

		/*!
		 *
		 * @brief Must be defined by the user. Process the run header.
		 *
		 */
		virtual void processRunHeader( EVENT::LCRunHeader* run  );

		/*!
		 *
		 * @brief Must be defined by the user. Process an event
		 *
		 */
		virtual void processEvent( EVENT::LCEvent * );

		/*!
		 *
		 * @brief Must be defined by the user. Check the event.
		 *
		 */
		virtual void check( EVENT::LCEvent * evt );

		/*!
		 *
		 * @brief Must be defined by the user. Called after processing all the events.
		 *
		 */
		virtual void end();

		/*!
		 *
		 *
		 *
		 */
		baboon::Return LoadSDHCALHits( baboon::SDHCAL *sdhcal , EVENT::LCEvent * );


		baboon::BaboonMonitoring *monitoring;
		baboon::DetectorManager *detectorManager;
		baboon::AlgorithmManager *algorithmManager;
		baboon::SDHCAL *sdhcal;
		std::string decoderString;
		std::string SDHCALCollectionName;
		baboon::StringVector IJKEncoding;
		std::string gearFile;
		std::string displayMode;


};  // class 


#endif  //  MONITORING_TEST_PROCESSOR_HH
